   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.global	_R_ADC_Create
  29                             	_R_ADC_Create:
  30                             	.LFB0:
  31                             		.file 1 "../src/r_cg_adc.c"
   1:../src/r_cg_adc.c **** /**************************************************************************************************
   2:../src/r_cg_adc.c **** * DISCLAIMER
   3:../src/r_cg_adc.c **** * This software is supplied by Renesas Electronics Corporation and is only 
   4:../src/r_cg_adc.c **** * intended for use with Renesas products. No other uses are authorized. This 
   5:../src/r_cg_adc.c **** * software is owned by Renesas Electronics Corporation and is protected under 
   6:../src/r_cg_adc.c **** * all applicable laws, including copyright laws.
   7:../src/r_cg_adc.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING 
   8:../src/r_cg_adc.c **** * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT 
   9:../src/r_cg_adc.c **** * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE 
  10:../src/r_cg_adc.c **** * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.
  11:../src/r_cg_adc.c **** * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS 
  12:../src/r_cg_adc.c **** * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  13:../src/r_cg_adc.c **** * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR 
  14:../src/r_cg_adc.c **** * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE 
  15:../src/r_cg_adc.c **** * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  16:../src/r_cg_adc.c **** * Renesas reserves the right, without notice, to make changes to this software 
  17:../src/r_cg_adc.c **** * and to discontinue the availability of this software.  By using this software, 
  18:../src/r_cg_adc.c **** * you agree to the additional terms and conditions found by accessing the 
  19:../src/r_cg_adc.c **** * following link:
  20:../src/r_cg_adc.c **** * http://www.renesas.com/disclaimer
  21:../src/r_cg_adc.c **** *
  22:../src/r_cg_adc.c **** * Copyright (C) 2012 Renesas Electronics Corporation. All rights reserved.
  23:../src/r_cg_adc.c **** ***************************************************************************************************
  24:../src/r_cg_adc.c **** 
  25:../src/r_cg_adc.c **** /**************************************************************************************************
  26:../src/r_cg_adc.c **** * File Name    : r_cg_adc.c
  27:../src/r_cg_adc.c **** * Version      : Applilet3 for RL78/L12 V1.00.00 [23 Mar 2012]
  28:../src/r_cg_adc.c **** * Device(s)    : R5F10RLC
  29:../src/r_cg_adc.c **** * Tool-Chain   : GNURL78 v12.03
  30:../src/r_cg_adc.c **** * Description  : This file implements device driver for ADC module.
  31:../src/r_cg_adc.c **** * Creation Date: 21/01/2013
  32:../src/r_cg_adc.c **** ***************************************************************************************************
  33:../src/r_cg_adc.c **** 
  34:../src/r_cg_adc.c **** /**************************************************************************************************
  35:../src/r_cg_adc.c **** Includes
  36:../src/r_cg_adc.c **** ***************************************************************************************************
  37:../src/r_cg_adc.c **** /* Defines the I/O register structures */
  38:../src/r_cg_adc.c **** #include "iodefine.h"
  39:../src/r_cg_adc.c **** /* Defines the extended I/O register structures */
  40:../src/r_cg_adc.c **** #include "iodefine_ext.h"
  41:../src/r_cg_adc.c **** 
  42:../src/r_cg_adc.c **** /* Header files inclusion */
  43:../src/r_cg_adc.c **** #include "r_cg_macrodriver.h"
  44:../src/r_cg_adc.c **** #include "r_cg_adc.h"
  45:../src/r_cg_adc.c **** #include "r_cg_userdefine.h"
  46:../src/r_cg_adc.c **** 
  47:../src/r_cg_adc.c **** 
  48:../src/r_cg_adc.c **** /**************************************************************************************************
  49:../src/r_cg_adc.c **** * Function Name: R_ADC_Create
  50:../src/r_cg_adc.c **** * Description  : This function initializes the AD converter.
  51:../src/r_cg_adc.c **** * Arguments    : None
  52:../src/r_cg_adc.c **** * Return Value : None
  53:../src/r_cg_adc.c **** ***************************************************************************************************
  54:../src/r_cg_adc.c **** void R_ADC_Create (void)
  55:../src/r_cg_adc.c **** {
  32                             		.loc 1 55 0
  56:../src/r_cg_adc.c ****     /* Supply AD clock */
  57:../src/r_cg_adc.c ****     ADCEN = 1U;
  33                             		.loc 1 57 0
  34 0000 C9 F0 F0 00             		movw	r8, #240
  35 0004 AD F0                   		movw	ax, r8
  36 0006 BD F4                   		movw	r12, ax
  37 0008 FA F4                   		movw	hl, r12
  38 000a 8B                      		mov	a, [hl]
  39 000b 9D F2                   		mov	r10, a
  40 000d 6A F2 20                		or	r10, #32
  41 0010 AD F0                   		movw	ax, r8
  42 0012 8D F2                   		mov	a, r10
  43 0014 9B                      		mov	[hl], a
  58:../src/r_cg_adc.c ****     
  59:../src/r_cg_adc.c ****     /* Disable AD conversion and clear ADM0 register */
  60:../src/r_cg_adc.c ****     ADM0 = 0x00;
  44                             		.loc 1 60 0
  45 0015 C9 F0 30 FF             		movw	r8, #-208
  46 0019 AD F0                   		movw	ax, r8
  47 001b BD F2                   		movw	r10, ax
  48 001d FA F2                   		movw	hl, r10
  49 001f F1                      		clrb	a
  50 0020 9B                      		mov	[hl], a
  61:../src/r_cg_adc.c ****     
  62:../src/r_cg_adc.c ****     /* disable INTAD interrupt */
  63:../src/r_cg_adc.c ****     ADMK = 1U;
  51                             		.loc 1 63 0
  52 0021 C9 F0 E6 FF             		movw	r8, #-26
  53 0025 AD F0                   		movw	ax, r8
  54 0027 BD F4                   		movw	r12, ax
  55 0029 FA F4                   		movw	hl, r12
  56 002b 8B                      		mov	a, [hl]
  57 002c 9D F2                   		mov	r10, a
  58 002e 6A F2 20                		or	r10, #32
  59 0031 AD F0                   		movw	ax, r8
  60 0033 8D F2                   		mov	a, r10
  61 0035 9B                      		mov	[hl], a
  64:../src/r_cg_adc.c ****     
  65:../src/r_cg_adc.c ****     /* Clear INTAD interrupt flag */
  66:../src/r_cg_adc.c ****     ADIF = 0U;
  62                             		.loc 1 66 0
  63 0036 C9 F0 E2 FF             		movw	r8, #-30
  64 003a AD F0                   		movw	ax, r8
  65 003c BD F4                   		movw	r12, ax
  66 003e FA F4                   		movw	hl, r12
  67 0040 8B                      		mov	a, [hl]
  68 0041 9D F2                   		mov	r10, a
  69 0043 5A F2 DF                		and	r10, #-33
  70 0046 AD F0                   		movw	ax, r8
  71 0048 8D F2                   		mov	a, r10
  72 004a 9B                      		mov	[hl], a
  67:../src/r_cg_adc.c ****     
  68:../src/r_cg_adc.c ****     /* Set INTAD low priority */
  69:../src/r_cg_adc.c ****     ADPR1 = 1U;
  73                             		.loc 1 69 0
  74 004b C9 F0 EE FF             		movw	r8, #-18
  75 004f AD F0                   		movw	ax, r8
  76 0051 BD F4                   		movw	r12, ax
  77 0053 FA F4                   		movw	hl, r12
  78 0055 8B                      		mov	a, [hl]
  79 0056 9D F2                   		mov	r10, a
  80 0058 6A F2 20                		or	r10, #32
  81 005b AD F0                   		movw	ax, r8
  82 005d 8D F2                   		mov	a, r10
  83 005f 9B                      		mov	[hl], a
  70:../src/r_cg_adc.c ****     ADPR0 = 1U;
  84                             		.loc 1 70 0
  85 0060 C9 F0 EA FF             		movw	r8, #-22
  86 0064 AD F0                   		movw	ax, r8
  87 0066 BD F4                   		movw	r12, ax
  88 0068 FA F4                   		movw	hl, r12
  89 006a 8B                      		mov	a, [hl]
  90 006b 9D F2                   		mov	r10, a
  91 006d 6A F2 20                		or	r10, #32
  92 0070 AD F0                   		movw	ax, r8
  93 0072 8D F2                   		mov	a, r10
  94 0074 9B                      		mov	[hl], a
  71:../src/r_cg_adc.c ****     
  72:../src/r_cg_adc.c ****     /* Set ANI0 pin as analog input */
  73:../src/r_cg_adc.c ****     PM2 |= 0x01U;
  95                             		.loc 1 73 0
  96 0075 C9 F0 22 FF             		movw	r8, #-222
  97 0079 C9 F2 22 FF             		movw	r10, #-222
  98 007d AD F2                   		movw	ax, r10
  99 007f BD F4                   		movw	r12, ax
 100 0081 FA F4                   		movw	hl, r12
 101 0083 8B                      		mov	a, [hl]
 102 0084 9D F2                   		mov	r10, a
 103 0086 6A F2 01                		or	r10, #1
 104 0089 AD F0                   		movw	ax, r8
 105 008b BD F4                   		movw	r12, ax
 106 008d FA F4                   		movw	hl, r12
 107 008f 8D F2                   		mov	a, r10
 108 0091 9B                      		mov	[hl], a
  74:../src/r_cg_adc.c ****     
  75:../src/r_cg_adc.c ****     /* ADC conversion time set to 30us */
  76:../src/r_cg_adc.c ****     ADM0 = _08_AD_CONVERSION_CLOCK_32 | _00_AD_TIME_MODE_NORMAL_1;
 109                             		.loc 1 76 0
 110 0092 C9 F0 30 FF             		movw	r8, #-208
 111 0096 AD F0                   		movw	ax, r8
 112 0098 BD F2                   		movw	r10, ax
 113 009a FA F2                   		movw	hl, r10
 114 009c 51 08                   		mov	a, #8
 115 009e 9B                      		mov	[hl], a
  77:../src/r_cg_adc.c ****     
  78:../src/r_cg_adc.c ****     /* Select software triggering and one-shot conversion mode */
  79:../src/r_cg_adc.c ****     //ERRADO, tava 0x00;
  80:../src/r_cg_adc.c ****     ADM1 = 0x20;
 116                             		.loc 1 80 0
 117 009f C9 F0 32 FF             		movw	r8, #-206
 118 00a3 AD F0                   		movw	ax, r8
 119 00a5 BD F4                   		movw	r12, ax
 120 00a7 FA F4                   		movw	hl, r12
 121 00a9 51 20                   		mov	a, #32
 122 00ab 9B                      		mov	[hl], a
  81:../src/r_cg_adc.c ****     
  82:../src/r_cg_adc.c ****     /* Set conversion resolution to 10-bit */
  83:../src/r_cg_adc.c ****     ADM2 = 0x00;
 123                             		.loc 1 83 0
 124 00ac C9 F0 10 00             		movw	r8, #16
 125 00b0 AD F0                   		movw	ax, r8
 126 00b2 BD F2                   		movw	r10, ax
 127 00b4 FA F2                   		movw	hl, r10
 128 00b6 F1                      		clrb	a
 129 00b7 9B                      		mov	[hl], a
  84:../src/r_cg_adc.c ****     
  85:../src/r_cg_adc.c ****     /* Upper limit set to 0xFF */
  86:../src/r_cg_adc.c ****     ADUL = _FF_AD_ADUL_VALUE;
 130                             		.loc 1 86 0
 131 00b8 C9 F0 11 00             		movw	r8, #17
 132 00bc AD F0                   		movw	ax, r8
 133 00be BD F4                   		movw	r12, ax
 134 00c0 FA F4                   		movw	hl, r12
 135 00c2 51 FF                   		mov	a, #-1
 136 00c4 9B                      		mov	[hl], a
  87:../src/r_cg_adc.c ****     
  88:../src/r_cg_adc.c ****     /* Lower limit set to 0x00 */
  89:../src/r_cg_adc.c ****     ADLL = _00_AD_ADLL_VALUE;
 137                             		.loc 1 89 0
 138 00c5 C9 F0 12 00             		movw	r8, #18
 139 00c9 AD F0                   		movw	ax, r8
 140 00cb BD F2                   		movw	r10, ax
 141 00cd FA F2                   		movw	hl, r10
 142 00cf F1                      		clrb	a
 143 00d0 9B                      		mov	[hl], a
  90:../src/r_cg_adc.c ****     
  91:../src/r_cg_adc.c ****     /* Select channel 0 as the input channel to sample */
  92:../src/r_cg_adc.c ****     ADS = _00_AD_INPUT_CHANNEL_0;
 144                             		.loc 1 92 0
 145 00d1 C9 F0 31 FF             		movw	r8, #-207
 146 00d5 AD F0                   		movw	ax, r8
 147 00d7 BD F4                   		movw	r12, ax
 148 00d9 FA F4                   		movw	hl, r12
 149 00db F1                      		clrb	a
 150 00dc 9B                      		mov	[hl], a
  93:../src/r_cg_adc.c **** }
 151                             		.loc 1 93 0
 152 00dd D7                      		ret
 153                             	.LFE0:
 155                             		.global	_R_ADC_Start
 157                             	_R_ADC_Start:
 158                             	.LFB1:
  94:../src/r_cg_adc.c **** /**************************************************************************************************
  95:../src/r_cg_adc.c **** * End of function R_ADC_Create
  96:../src/r_cg_adc.c **** ***************************************************************************************************
  97:../src/r_cg_adc.c **** 
  98:../src/r_cg_adc.c **** /**************************************************************************************************
  99:../src/r_cg_adc.c **** * Function Name: R_ADC_Start
 100:../src/r_cg_adc.c **** * Description  : This function starts the AD converter.
 101:../src/r_cg_adc.c **** * Arguments    : None
 102:../src/r_cg_adc.c **** * Return Value : None
 103:../src/r_cg_adc.c **** ***************************************************************************************************
 104:../src/r_cg_adc.c **** void R_ADC_Start (void)
 105:../src/r_cg_adc.c **** {
 159                             		.loc 1 105 0
 106:../src/r_cg_adc.c ****         /* clear INTAD interrupt flag */
 107:../src/r_cg_adc.c ****     //ADIF = 0U;
 108:../src/r_cg_adc.c **** 
 109:../src/r_cg_adc.c ****     /* enable INTAD interrupt */
 110:../src/r_cg_adc.c ****     //ADMK = 0U;
 111:../src/r_cg_adc.c ****     ADMK = 1U;
 160                             		.loc 1 111 0
 161 00de C9 F0 E6 FF             		movw	r8, #-26
 162 00e2 AD F0                   		movw	ax, r8
 163 00e4 BD F4                   		movw	r12, ax
 164 00e6 FA F4                   		movw	hl, r12
 165 00e8 8B                      		mov	a, [hl]
 166 00e9 9D F2                   		mov	r10, a
 167 00eb 6A F2 20                		or	r10, #32
 168 00ee AD F0                   		movw	ax, r8
 169 00f0 8D F2                   		mov	a, r10
 170 00f2 9B                      		mov	[hl], a
 112:../src/r_cg_adc.c **** 
 113:../src/r_cg_adc.c ****     /* enable AD conversion */
 114:../src/r_cg_adc.c ****     ADCS = 1U;
 171                             		.loc 1 114 0
 172 00f3 C9 F0 30 FF             		movw	r8, #-208
 173 00f7 AD F0                   		movw	ax, r8
 174 00f9 BD F4                   		movw	r12, ax
 175 00fb FA F4                   		movw	hl, r12
 176 00fd 8B                      		mov	a, [hl]
 177 00fe 9D F2                   		mov	r10, a
 178 0100 6A F2 80                		or	r10, #-128
 179 0103 AD F0                   		movw	ax, r8
 180 0105 8D F2                   		mov	a, r10
 181 0107 9B                      		mov	[hl], a
 115:../src/r_cg_adc.c **** }
 182                             		.loc 1 115 0
 183 0108 D7                      		ret
 184                             	.LFE1:
 186                             		.global	_R_ADC_Stop
 188                             	_R_ADC_Stop:
 189                             	.LFB2:
 116:../src/r_cg_adc.c **** /**************************************************************************************************
 117:../src/r_cg_adc.c **** * End of function R_ADC_Start
 118:../src/r_cg_adc.c **** ***************************************************************************************************
 119:../src/r_cg_adc.c **** 
 120:../src/r_cg_adc.c **** /**************************************************************************************************
 121:../src/r_cg_adc.c **** * Function Name: R_ADC_Stop
 122:../src/r_cg_adc.c **** * Description  : This function stops the AD converter.
 123:../src/r_cg_adc.c **** * Arguments    : None
 124:../src/r_cg_adc.c **** * Return Value : None
 125:../src/r_cg_adc.c **** ***************************************************************************************************
 126:../src/r_cg_adc.c **** void R_ADC_Stop (void)
 127:../src/r_cg_adc.c **** {
 190                             		.loc 1 127 0
 128:../src/r_cg_adc.c **** 	/* disable AD conversion */
 129:../src/r_cg_adc.c **** 	ADCS = 0U;
 191                             		.loc 1 129 0
 192 0109 C9 F0 30 FF             		movw	r8, #-208
 193 010d AD F0                   		movw	ax, r8
 194 010f BD F4                   		movw	r12, ax
 195 0111 FA F4                   		movw	hl, r12
 196 0113 8B                      		mov	a, [hl]
 197 0114 9D F2                   		mov	r10, a
 198 0116 5A F2 7F                		and	r10, #127
 199 0119 AD F0                   		movw	ax, r8
 200 011b 8D F2                   		mov	a, r10
 201 011d 9B                      		mov	[hl], a
 130:../src/r_cg_adc.c **** 
 131:../src/r_cg_adc.c **** 	/* disable INTAD interrupt */
 132:../src/r_cg_adc.c **** 	ADMK = 1U;
 202                             		.loc 1 132 0
 203 011e C9 F0 E6 FF             		movw	r8, #-26
 204 0122 AD F0                   		movw	ax, r8
 205 0124 BD F4                   		movw	r12, ax
 206 0126 FA F4                   		movw	hl, r12
 207 0128 8B                      		mov	a, [hl]
 208 0129 9D F2                   		mov	r10, a
 209 012b 6A F2 20                		or	r10, #32
 210 012e AD F0                   		movw	ax, r8
 211 0130 8D F2                   		mov	a, r10
 212 0132 9B                      		mov	[hl], a
 133:../src/r_cg_adc.c **** 
 134:../src/r_cg_adc.c **** 	/* clear INTAD interrupt flag */
 135:../src/r_cg_adc.c **** 	ADIF = 0U;
 213                             		.loc 1 135 0
 214 0133 C9 F0 E2 FF             		movw	r8, #-30
 215 0137 AD F0                   		movw	ax, r8
 216 0139 BD F4                   		movw	r12, ax
 217 013b FA F4                   		movw	hl, r12
 218 013d 8B                      		mov	a, [hl]
 219 013e 9D F2                   		mov	r10, a
 220 0140 5A F2 DF                		and	r10, #-33
 221 0143 AD F0                   		movw	ax, r8
 222 0145 8D F2                   		mov	a, r10
 223 0147 9B                      		mov	[hl], a
 136:../src/r_cg_adc.c **** }
 224                             		.loc 1 136 0
 225 0148 D7                      		ret
 226                             	.LFE2:
 228                             		.global	_R_ADC_Set_Operation_On
 230                             	_R_ADC_Set_Operation_On:
 231                             	.LFB3:
 137:../src/r_cg_adc.c **** /**************************************************************************************************
 138:../src/r_cg_adc.c **** * End of function R_ADC_Stop
 139:../src/r_cg_adc.c **** ***************************************************************************************************
 140:../src/r_cg_adc.c **** 
 141:../src/r_cg_adc.c **** /**************************************************************************************************
 142:../src/r_cg_adc.c **** * Function Name: R_ADC_Set_Operation_On
 143:../src/r_cg_adc.c **** * Description  : This function enables comparator operation.
 144:../src/r_cg_adc.c **** * Arguments    : None
 145:../src/r_cg_adc.c **** * Return Value : None
 146:../src/r_cg_adc.c **** ***************************************************************************************************
 147:../src/r_cg_adc.c **** void R_ADC_Set_Operation_On(void)
 148:../src/r_cg_adc.c **** {
 232                             		.loc 1 148 0
 149:../src/r_cg_adc.c **** 	/* enable AD comparator */
 150:../src/r_cg_adc.c **** 	ADCE = 1U;
 233                             		.loc 1 150 0
 234 0149 C9 F0 30 FF             		movw	r8, #-208
 235 014d AD F0                   		movw	ax, r8
 236 014f BD F4                   		movw	r12, ax
 237 0151 FA F4                   		movw	hl, r12
 238 0153 8B                      		mov	a, [hl]
 239 0154 9D F2                   		mov	r10, a
 240 0156 6A F2 01                		or	r10, #1
 241 0159 AD F0                   		movw	ax, r8
 242 015b 8D F2                   		mov	a, r10
 243 015d 9B                      		mov	[hl], a
 151:../src/r_cg_adc.c **** }
 244                             		.loc 1 151 0
 245 015e D7                      		ret
 246                             	.LFE3:
 248                             		.global	_R_ADC_Set_Operation_Off
 250                             	_R_ADC_Set_Operation_Off:
 251                             	.LFB4:
 152:../src/r_cg_adc.c **** /**************************************************************************************************
 153:../src/r_cg_adc.c **** * End of function R_ADC_Set_Operation_On
 154:../src/r_cg_adc.c **** ***************************************************************************************************
 155:../src/r_cg_adc.c **** 
 156:../src/r_cg_adc.c **** /**************************************************************************************************
 157:../src/r_cg_adc.c **** * Function Name: R_ADC_Set_Operation_Off
 158:../src/r_cg_adc.c **** * Description  : This function stops comparator operation.
 159:../src/r_cg_adc.c **** * Arguments    : None
 160:../src/r_cg_adc.c **** * Return Value : None
 161:../src/r_cg_adc.c **** ***************************************************************************************************
 162:../src/r_cg_adc.c **** void R_ADC_Set_Operation_Off(void)
 163:../src/r_cg_adc.c **** {
 252                             		.loc 1 163 0
 164:../src/r_cg_adc.c **** 	/* disable AD comparator */
 165:../src/r_cg_adc.c **** 	ADCE = 0U;
 253                             		.loc 1 165 0
 254 015f C9 F0 30 FF             		movw	r8, #-208
 255 0163 AD F0                   		movw	ax, r8
 256 0165 BD F4                   		movw	r12, ax
 257 0167 FA F4                   		movw	hl, r12
 258 0169 8B                      		mov	a, [hl]
 259 016a 9D F2                   		mov	r10, a
 260 016c 5A F2 FE                		and	r10, #-2
 261 016f AD F0                   		movw	ax, r8
 262 0171 8D F2                   		mov	a, r10
 263 0173 9B                      		mov	[hl], a
 166:../src/r_cg_adc.c **** }
 264                             		.loc 1 166 0
 265 0174 D7                      		ret
 266                             	.LFE4:
 268                             		.global	_R_ADC_Get_Result
 270                             	_R_ADC_Get_Result:
 271                             	.LFB5:
 167:../src/r_cg_adc.c **** /**************************************************************************************************
 168:../src/r_cg_adc.c **** * End of function R_ADC_Set_Operation_Off
 169:../src/r_cg_adc.c **** ***************************************************************************************************
 170:../src/r_cg_adc.c **** 
 171:../src/r_cg_adc.c **** /**************************************************************************************************
 172:../src/r_cg_adc.c **** * Function Name: R_ADC_Get_Result
 173:../src/r_cg_adc.c **** * Description  : This function returns the conversion result in the buffer.
 174:../src/r_cg_adc.c **** * Arguments    : buffer
 175:../src/r_cg_adc.c **** *                    the address where to write the conversion result
 176:../src/r_cg_adc.c **** * Return Value : None
 177:../src/r_cg_adc.c **** ***************************************************************************************************
 178:../src/r_cg_adc.c **** void R_ADC_Get_Result(uint16_t * const buffer)
 179:../src/r_cg_adc.c **** {
 272                             		.loc 1 179 0
 180:../src/r_cg_adc.c **** 	while(ADCS != 0U);
 273                             		.loc 1 180 0
 274 0175 00                      		nop
 275                             	.L7:
 276                             		.loc 1 180 0 is_stmt 0 discriminator 1
 277 0176 C9 F0 30 FF             		movw	r8, #-208
 278 017a AD F0                   		movw	ax, r8
 279 017c BD F2                   		movw	r10, ax
 280 017e FA F2                   		movw	hl, r10
 281 0180 8B                      		mov	a, [hl]
 282 0181 9D F0                   		mov	r8, a
 283 0183 5A F0 80                		and	r8, #-128
 284 0186 D4 F0                   		cmp0	r8 
 285 0188 61 E8                   		skz 
 286 018a EC 76 01 00             		br	!!.L7
 181:../src/r_cg_adc.c ****     *buffer = (uint16_t)(ADCR >> 6U);
 287                             		.loc 1 181 0 is_stmt 1
 288 018e C9 F0 1E FF             		movw	r8, #-226
 289 0192 AD F0                   		movw	ax, r8
 290 0194 BD F4                   		movw	r12, ax
 291 0196 FA F4                   		movw	hl, r12
 292 0198 AB                      		movw	ax, [hl]
 293 0199 BD F0                   		movw	r8, ax
 294 019b 31 6E                   		shrw	ax, 6
 295 019d BD F2                   		movw	r10, ax
 296 019f A8 04                   		movw	ax, [sp+4]
 297 01a1 BD F0                   		movw	r8, ax
 298 01a3 BD F4                   		movw	r12, ax
 299 01a5 FA F4                   		movw	hl, r12
 300 01a7 AD F2                   		movw	ax, r10
 301 01a9 BB                      		movw	[hl], ax
 182:../src/r_cg_adc.c **** }
 302                             		.loc 1 182 0
 303 01aa D7                      		ret
 304                             	.LFE5:
 372                             	.Letext0:
 373                             		.file 2 "../src/iodefine.h"
 374                             		.file 3 "../src/iodefine_ext.h"
 375                             		.file 4 "../src/r_cg_macrodriver.h"
