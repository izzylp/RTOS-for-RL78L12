   1                             	# 1 "../src/reset_program.asm"
   1                             	/***********************************************************************/
   1                             	...
   0                             	
   2                             	/*  													               */
   3                             	/*      PROJECT NAME :  teste4                                         */
   4                             	/*      FILE         :  reset_program.asm                              */
   5                             	/*      DESCRIPTION  :  Reset Program                                  */
   6                             	/*      CPU SERIES   :  RL78 - L12                                     */
   7                             	/*      CPU TYPE     :  R5F10RLC                                       */
   8                             	/*  													               */
   9                             	/*      This file is generated by e2studio.                        */
  10                             	/*  													               */
  11                             	/***********************************************************************/                          
  12                             	                                                                                   
  13                             	
  14                             	
  15                             		/*reset_program.asm*/
  16                             	
  17                             		.list
  18                             	
  19                             		.global _PowerON_Reset  /*! global Start routine */
  20 0000 00 00                   		.short _PowerON_Reset
  21                             		
  22                             	#ifdef CPPAPP	
  23                             	___dso_handle:
  24                             		.global ___dso_handle
  25                             	#endif	
  26                             	
  27                             	
  28                             		.extern _HardwareSetup /*! external Sub-routine to initialise Hardware*/
  29                             		.extern _data
  30                             		.extern _mdata
  31                             		.extern _ebss
  32                             		.extern _bss
  33                             		
  34                             		.extern _edata
  35                             		.extern _main 
  36                             		.extern _stack
  37                             		.extern _exit
  38                             	
  39                             		/*  ;; HL = start of list
  40                             	        ;; DE = end of list
  41                             	        ;; BC = step direction (+2 or -2)
  42                             		*/
  43                             		
  44                             		.text
  45                             	
  46                             	/* call to _PowerON_Reset */
  47                             	_PowerON_Reset:
  48                             	/* initialise user stack pointer */
  49 0002 CB F8 00 00             		movw sp,#_stack /* Set stack pointer */
  50                             	
  51                             	
  52                             	/* load data section from ROM to RAM */	
  53                             	;; block move to initialize .data
  54                             	
  55                             	        ;; we're copying from 00:[_romdatastart] to 0F:[_datastart]
  56                             	        ;; and our data is not in the mirrored area.
  57 0006 41 00                   	    mov     es, #0
  58 0008 61 CF                   	    sel     rb0         /*  ;;bank 0 */
  59 000a 34 00 00                	    movw    de, #_mdata	/* src ROM address of data section in de */
  60 000d 36 00 00                	    movw    hl, #_data 	/* dest start RAM address of data section in hl */
  61                             			
  62 0010 61 DF                   	    sel     rb1              /* bank 1 */
  63 0012 36 00 00                	    movw    hl, #_data 	/* dest start RAM address of data section in hl */
  64 0015 30 00 00                	    movw    ax, #_edata   /*    ;; size of romdata section in ax */
  65 0018 27                      	    subw    ax,hl  		/* store data size */
  66 0019 31 1E                   	    shrw	ax,1
  67                             	1:
  68 001b 44 00 00                	    cmpw    ax, #0		   /* check if end of data */
  69 001e DD 0E                   	    bz      $1f
  70 0020 B1                      	    decw    ax
  71 0021 61 CF                   	    sel     rb0             /* bank 0 */
  72 0023 11 A9                   	    movw    ax, es:[de]
  73 0025 BB                      	    movw    [hl], ax
  74 0026 A5                      	    incw    de
  75 0027 A5                      	    incw	de
  76 0028 A7                      	    incw    hl
  77 0029 A7                      		incw	hl
  78 002a 61 DF                   	    sel     rb1         /* bank 1  -  compare and decrement*/
  79 002c EF ED                   	    br      $1b
  80                             	1:
  81                             	
  82                             		
  83                             	/* bss initialisation : zero out bss */
  84 002e 61 CF                   	    sel     rb0         /* bank 0 */
  85 0030 36 00 00                	    movw    hl, #_bss  	/* store the start address of bss in hl */
  86 0033 30 00 00                	    movw    ax, #0		/* load AX reg with zero */
  87 0036 61 DF                   	    sel     rb1         /* bank 1 */
  88 0038 30 00 00                	    movw    ax, #_ebss  /* store the end address (size of) bss section in ax */
  89 003b 27                      	    subw    ax,hl ;; store data size
  90 003c 31 1E                   	    shrw    ax,1
  91                             	1:
  92 003e 44 00 00                	    cmpw    ax, #0
  93 0041 DD 0A                   	    bz      $1f
  94 0043 B1                      	    decw    ax
  95 0044 61 CF                   	    sel     rb0         /* bank 0 */
  96 0046 BB                      	    movw    [hl], ax
  97 0047 A7                      	    incw    hl
  98 0048 A7                      	    incw	hl
  99 0049 61 DF                   	    sel     rb1
 100 004b EF F1                   	    br      $1b
 101                             	1:
 102 004d 61 CF                   	    sel     rb0             /* bank 0 */
 103                             	
 104                             	/* call the hardware initialiser */
 105 004f FC 00 00 00             		call	!!_HardwareSetup
 106 0053 00                      		nop
 107                             	
 108                             	/* start user program */
 109                             	
 110 0054 30 00 00                	    movw    ax, #0
 111 0057 C1                      	    push    ax      /* envp */
 112 0058 C1                      	    push    ax      /* argv */
 113 0059 C1                      	    push    ax      /* argc */
 114 005a FC 00 00 00             	    call	!!_main
 115                             	
 116                             	
 117                             	/* call to exit*/
 118                             	_exit:
 119 005e EF FE                   	     br	$_exit
 120                             	
 121                             		.end             
